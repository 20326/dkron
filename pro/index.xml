<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dkron Pro on Dkron - Distributed job scheduling system</title>
    <link>/pro/</link>
    <description>Recent content in Dkron Pro on Dkron - Distributed job scheduling system</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/pro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS ECS Executor</title>
      <link>/pro/ecs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pro/ecs/</guid>
      <description>The ECS exeutor is capable of launching tasks in ECS clusters, then listen to a stream of CloudWatch Logs and return the output.
To configure a job to be run in ECS you can use either a JSON Task definition template or an already defined task in ECS.
To allow the ECS Task runner to run tasks, the machine running Dkron needs to have the appropriate permissions configured in AWS IAM:</description>
    </item>
    
    <item>
      <title>Authorization</title>
      <link>/pro/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pro/auth/</guid>
      <description>Dkron Pro has the ability to be configured to use HTTP basic auth.
Set this parameters in your dkron config file:
username: foo password: bar  This will enable auth on the WebUI and for the API.</description>
    </item>
    
    <item>
      <title>Clustering</title>
      <link>/pro/clustering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pro/clustering/</guid>
      <description>Configure a cluster Run in HA mode, good for companies.
Configure the peers to join:
# dkron.yml join: - 10.19.3.9 - 10.19.4.64 - 10.19.7.215  # etcd.conf.yaml # Initial cluster configuration for bootstrapping. initial-cluster: dkron1=https://10.19.3.9:2380,dkron2=https://10.19.4.64:2380,dkron3=https://10.19.7.215:2380  With this configuration Dkron Pro should start in cluster mode with embedded storage.</description>
    </item>
    
    <item>
      <title>Docker executor</title>
      <link>/pro/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pro/docker/</guid>
      <description> Docker executor can run docker jobs
Configuration To run a docker job create a job config with the following executor:
Example:
&amp;quot;executor&amp;quot;: &amp;quot;docker&amp;quot;, &amp;quot;executor_config&amp;quot;: { &amp;quot;image&amp;quot;: &amp;quot;alpine&amp;quot;, //docker image to use &amp;quot;volumes&amp;quot;: &amp;quot;/logs:/var/log/&amp;quot;, //comma separated list of volume mappings &amp;quot;command&amp;quot;: &amp;quot;echo \&amp;quot;Hello from dkron\&amp;quot;&amp;quot;, //command to pass to run on container &amp;quot;env&amp;quot;: &amp;quot;ENVIRONMENT=variable&amp;quot; //environment variables to pass to the container }  </description>
    </item>
    
    <item>
      <title>Elasticsearch processor</title>
      <link>/pro/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pro/elasticsearch/</guid>
      <description> The Elasticsearch processor can fordward execution logs to an ES cluster.
Configuration &amp;quot;processors&amp;quot;: { &amp;quot;elasticsearch&amp;quot;: { &amp;quot;url&amp;quot;: &amp;quot;http://localhost:9200&amp;quot;, //comma separated list of Elasticsearch hosts urls (default: http://localhost:9200) &amp;quot;index&amp;quot;: &amp;quot;dkron_logs&amp;quot;, //desired index name (default: dkron_logs) &amp;quot;forward&amp;quot;: &amp;quot;false&amp;quot; //forward logs to the next processor (default: false) } }  </description>
    </item>
    
    <item>
      <title>Email processor</title>
      <link>/pro/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pro/email/</guid>
      <description>The Email processor provides flexibility to job email notifications.
Configuration of the email processor is stored in a file named dkron-processor-email.yml in the same locations as dkron.yml, and should include a list of providers, it can include any number of providers.
Example:
provider1: host: smtp.myprovider.com port: 25 username: myusername password: mypassword from: cron@mycompany.com subjectPrefix: &#39;[Staging] &#39;  Then configure each job with the following options:
Example:
&amp;quot;processors&amp;quot;: { &amp;quot;email&amp;quot;: { &amp;quot;provider&amp;quot;: &amp;quot;provider1&amp;quot;, &amp;quot;emails&amp;quot;: &amp;quot;team@mycompany.</description>
    </item>
    
    <item>
      <title>Embedded storage</title>
      <link>/pro/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pro/storage/</guid>
      <description>Dkron Pro has an embedded distributed KV store engine based on etcd. This works out of the box on each node dkron server is started.
This ensures a dead easy install and setup, basically run dkron and you will have a full working node and at the same time provides you with a fully tested well supported store for its use with dkron.</description>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>/pro/encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pro/encryption/</guid>
      <description>SSL encryption is used for communicating dkron pro and the embedded store, and between storage nodes itself. Also client auth is enabled, so only dkron pro clients can talk to the embedded store. This means that no other software running on your local network will be able to talk to dkron&amp;rsquo;s etcd server.
This ensures that no unexpected usage of the Dkron&amp;rsquo;s store will happen, unless it is another Dkron pro instance.</description>
    </item>
    
    <item>
      <title>Using SSL</title>
      <link>/pro/ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pro/ssl/</guid>
      <description>Using SSL By default Dkron Pro runs with automatically generated SSL certificates, this is enough if using it in a trusted environment but to have a better grade of confidence, it is recommended to run Dkron Pro with custom SSL certificates.
Follow this tutorial to generate autosigned SSL certificates for your instances.
You don&amp;rsquo;t need a client certificate for Dkron server, just add &amp;ldquo;client auth&amp;rdquo; usage to your server cert.</description>
    </item>
    
  </channel>
</rss>